namespace com.ibm.streamsx.kafka.sample ;

use com.ibm.streamsx.kafka::KafkaConsumer ;
use com.ibm.streamsx.kafka::KafkaProducer ;

/*
 * This sample demonstrates how to specify different attribute names
 * for the topic, key and message using parameters. 
 */
public composite KafkaAttrNameParamsSample
{
    type
        Message = rstring myTopic, rstring myKey, rstring myMsg, int64 myMsgTimestamp, int32 myPartition, int64 myOffset;
    graph
        (stream<Message> KafkaConsumer_1_out0) as KafkaConsumer_1 =
            KafkaConsumer()
        {
            param
                topic : "test" ;
                outputKeyAttributeName : "myKey" ;
                outputMessageAttributeName : "myMsg" ;
                outputTopicAttributeName : "myTopic" ;
                outputOffsetAttributeName : "myOffset" ;
                outputPartitionAttributeName : "myPartition" ;
                outputTimestampAttributeName : "myMsgTimestamp";
                propertiesFile : "etc/consumer.properties";
        }

        () as Custom_2 = Custom(KafkaConsumer_1_out0)
        {
            logic
                onTuple KafkaConsumer_1_out0:
                {
                    println(KafkaConsumer_1_out0);
                }
        }

        () as KafkaProducer_3 = KafkaProducer(Beacon_4_out0)
        {
            param
                keyAttribute : myKey;
                messageAttribute : myMsg ;
                topicAttribute : myTopic ;
                timestampAttribute : myMsgTimestamp;
                propertiesFile : "etc/producer.properties";
        }

        (stream<Message> Beacon_4_out0) as Beacon_4 = Beacon()
        {
            param
                iterations : 10u;
                initDelay : 5f;
            output Beacon_4_out0:
                myTopic = "test",
                myKey = "key_" + (rstring)IterationCount(),
                myMsgTimestamp = (int64)IterationCount(),
                myMsg = "msg_" + (rstring)IterationCount();
        }

}

