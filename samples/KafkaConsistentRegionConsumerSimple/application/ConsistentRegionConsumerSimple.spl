namespace application ;

use com.ibm.streamsx.kafka::* ;
/**
 * Read from a single-partition Kafka topic using the KafkaConsumer operator 
 * in a consistent region (guaranteed tuple processing). This sample contains
 * two consistent regions. The first includes the beacon and the KafkaProducer, 
 * the second includes the KafkaConsumer and the MessagePrinter. 
 * 
 * Make sure you have created your topic before launching:
 *   bin/kafka-topics.sh --create --zookeeper <zk.Host.1>:2181 --partitions 1 --topic mySimpleTopic
 * 
 * Edit the consumer.properties and producer.properties files found in the etc directory to include
 * your Kafka properties. 
 * 
 * Build using Studio or the provided Makefile. 
 * 
 * Check results by looking at messagesReceived.out in the data directory. 
 * 
 * Consistent Region does not support Standalone mode, so this sample is only interesting in 
 * Distributed mode. 
 * 
 * 
 */
composite ConsistentRegionSimple
{
	param 
		expression<rstring> $topic : "mySimpleTopic";
	graph
		//generate data to be written to a kafka server
		@consistent(trigger = operatorDriven)
		stream<rstring topic, rstring key, rstring message> OutputStream = Beacon()
		{
			param
				period : 0.25 ;
				initDelay : 4.0 ;
				triggerCount : 20u ;
			output
				OutputStream : topic = $topic, message = "The distance between insanity and genius is measured only by success. -Bruce Feirstein"
					, key =(rstring)(int32)(random() * 10.0) ;
			}

		//Write to Kafka Server
		() as KafkaSinkOp = KafkaProducer(OutputStream)
			{
				param
					propertiesFile : "etc/producer.properties" ;
			}

		//Read in from a kafka server and start consistent region
		@consistent(trigger = operatorDriven) stream<rstring message, rstring key>
		KafkaConsumerOut = KafkaConsumer()
		{
			param
				propertiesFile : "etc/consumer.properties" ;
				topic : $topic ;
				partition : 0 ;
				triggerCount : 20 ;
		}

		//Print out data to a file
		() as MessagePrinter = FileSink(KafkaConsumerOut)
			{
				param
					file : "messagesReceived.out" ;
					flush : 1u ;
					format : csv ;
			}

		() as JCP = JobControlPlane()
			{
			}

	}
