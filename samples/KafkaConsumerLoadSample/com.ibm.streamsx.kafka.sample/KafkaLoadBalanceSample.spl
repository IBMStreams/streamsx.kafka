namespace com.ibm.streamsx.kafka.sample ;

use com.ibm.streamsx.kafka::KafkaConsumer ;
use com.ibm.streamsx.kafka::KafkaProducer ;

/*
 * This sample demonstrates how to configure KafkaConsumers in a UDP region
 * to load balance the messages being consumed. The key here is that the 
 * 'etc/consumer.properties' file specifies the `group.id` property, which is 
 * used by all of the consumers. This means that each consumer will be placed
 * in the same group, resulting in Kafka sending each message to only one consumer. 
 * 
 * The producer operator will generate 10 tuples/sec. Each consumer should be
 * receiving and submitting approximately 3 tuples/sec.
 */
composite KafkaLoadBalanceSample
{
	type
		Message = rstring key, rstring message ;
	graph
		@parallel(width = 3)
		(stream<Message> KafkaConsumer_1_out0) as KafkaConsumer_1 = KafkaConsumer()
		{
			param
				topic : "test" ;
				propertiesFile : "etc/consumer.properties" ;
		}

		() as Custom_2 = Custom(KafkaConsumer_1_out0)
		{
			logic
				onTuple KafkaConsumer_1_out0 :
				{
					println(KafkaConsumer_1_out0) ;
				}

		}

		() as KafkaProducer_3 = KafkaProducer(Beacon_4_out0)
		{
			param
				topic : "test" ;
				propertiesFile : "etc/producer.properties" ;
		}

		(stream<Message> Beacon_4_out0) as Beacon_4 = Beacon()
		{
			param
				period : 0.1 ;
			output
				Beacon_4_out0 : key = "key_" +(rstring) IterationCount(), message = "msg_"
					+(rstring) IterationCount() ;
		}

}

