namespace com.ibm.streamsx.kafka.sample ;

use com.ibm.streamsx.kafka::KafkaConsumer ;
use com.ibm.streamsx.kafka::KafkaProducer ;

/*
 * This sample uses a float for the key and message. The
 * Kafka operators will automatically use the correct 
 * serializer and deserializer by examining the key and message types. 
 */
public composite KafkaFloatSample
{
	type
		Message = float64 key, float64 message;
	graph
		(stream<Message> KafkaConsumer_1_out0) as KafkaConsumer_1 =
			KafkaConsumer()
		{
			param
				topic : "test" ;
				propertiesFile : "etc/consumer.properties";
		}

		() as Custom_2 = Custom(KafkaConsumer_1_out0)
		{
			logic
				onTuple KafkaConsumer_1_out0:
				{
					println(KafkaConsumer_1_out0);
				}
		}

		() as KafkaProducer_3 = KafkaProducer(Beacon_4_out0)
		{
			param
				topic : "test" ;
                propertiesFile : "etc/producer.properties" ;
		}

		(stream<Message> Beacon_4_out0) as Beacon_4 = Beacon()
		{
			param
				iterations : 10u;
				initDelay : 5f;
			output Beacon_4_out0:
				key = (float64)IterationCount()/10f,
				message = (float64)IterationCount()/10f;
		}

}

