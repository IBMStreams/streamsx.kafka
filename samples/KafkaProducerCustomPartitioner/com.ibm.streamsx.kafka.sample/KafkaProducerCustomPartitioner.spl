namespace com.ibm.streamsx.kafka.sample ;

use com.ibm.streamsx.kafka::KafkaConsumer ;
use com.ibm.streamsx.kafka::KafkaProducer ;

/*
 * This sample demonstrates how to use a custom partitioner with 
 * the KafkaProducer operator. In order for the KafkaProducer to
 * use a custom partitioner, the following steps must be taken: 
 * 
 *  1. The JAR file containing the custom partitioner must be 
 *     specified via the `userLib` property.
 *  2. The `partitioner.class` property must be set in the 
 *     KafkaProducers property file (producer.properties in this sample) 
 */
composite KafkaProducerCustomPartitioner
{
    type
        Message = rstring key, rstring message;
    graph
        (stream<Message> KafkaConsumer_1_out0) as KafkaConsumer_1 =
            KafkaConsumer()
        {
            param
                topic : "test" ;
                propertiesFile : "etc/consumer.properties";
        }

        () as Custom_2 = Custom(KafkaConsumer_1_out0)
        {
            logic
                onTuple KafkaConsumer_1_out0:
                {
                    println(KafkaConsumer_1_out0);
                }
        }

        () as KafkaProducer_3 = KafkaProducer(Beacon_4_out0)
        {
            param
                topic : "test" ;
                propertiesFile : "etc/producer.properties";
                userLib : "etc/custom-partitioner.jar";
        }

        (stream<Message> Beacon_4_out0) as Beacon_4 = Beacon()
        {
            param
                iterations : 10u;
                initDelay : 5f;
            output Beacon_4_out0:
                key = "key_" + (rstring)IterationCount(),
                message = "msg_" + (rstring)IterationCount();
        }

}

